# docker-compose.yml
version: '3.8'

services:
  postgres:
    platform: linux/arm64
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: status_monitor
      POSTGRES_USER: status_user
      POSTGRES_PASSWORD: status_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U status_user -d status_monitor"]
      interval: 30s
      timeout: 10s
      retries: 3

  backend:
    platform: linux/arm64
    build: 
      context: ./backend
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://status_user:status_password@postgres:5432/status_monitor
      - PORT=3001
      - CHECK_INTERVAL=60000
      - LOG_LEVEL=info
      - FRONTEND_URL=http://localhost:8080
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "3001:3001"
    restart: unless-stopped
    volumes:
      - ./backend/logs:/app/logs
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  frontend:
    platform: linux/arm64
    build: 
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "8080:80"
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:

networks:
  default:
    driver: bridge